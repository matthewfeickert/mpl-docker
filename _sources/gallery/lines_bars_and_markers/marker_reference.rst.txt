.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_lines_bars_and_markers_marker_reference.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_gallery_lines_bars_and_markers_marker_reference.py:


================
Marker reference
================

Matplotlib supports multiple categories of markers which are selected using
the ``marker`` parameter of plot commands:

- `Unfilled markers`_
- `Filled markers`_
- `Markers created from TeX symbols`_
- Custom markers can be created from paths. See
  :doc:`/gallery/shapes_and_collections/marker_path`.

For a list of all markers see also the `matplotlib.markers` documentation.

For example usages see
:doc:`/gallery/lines_bars_and_markers/scatter_star_poly`.


.. code-block:: default


    import matplotlib.pyplot as plt
    from matplotlib.lines import Line2D


    text_style = dict(horizontalalignment='right', verticalalignment='center',
                      fontsize=12, fontfamily='monospace')
    marker_style = dict(linestyle=':', color='0.8', markersize=10,
                        markerfacecolor="tab:blue", markeredgecolor="tab:blue")


    def format_axes(ax):
        ax.margins(0.2)
        ax.set_axis_off()
        ax.invert_yaxis()


    def split_list(a_list):
        i_half = len(a_list) // 2
        return a_list[:i_half], a_list[i_half:]









Unfilled markers
================
Unfilled markers are single-colored.


.. code-block:: default


    fig, axs = plt.subplots(ncols=2)
    fig.suptitle('Un-filled markers', fontsize=14)

    # Filter out filled markers and marker settings that do nothing.
    unfilled_markers = [m for m, func in Line2D.markers.items()
                        if func != 'nothing' and m not in Line2D.filled_markers]

    for ax, markers in zip(axs, split_list(unfilled_markers)):
        for y, marker in enumerate(markers):
            ax.text(-0.5, y, repr(marker), **text_style)
            ax.plot([y] * 3, marker=marker, **marker_style)
        format_axes(ax)

    plt.show()





.. image:: /gallery/lines_bars_and_markers/images/sphx_glr_marker_reference_001.png
    :alt: Un-filled markers
    :class: sphx-glr-single-img





Filled markers
==============


.. code-block:: default


    fig, axs = plt.subplots(ncols=2)
    fig.suptitle('Filled markers', fontsize=14)
    for ax, markers in zip(axs, split_list(Line2D.filled_markers)):
        for y, marker in enumerate(markers):
            ax.text(-0.5, y, repr(marker), **text_style)
            ax.plot([y] * 3, marker=marker, **marker_style)
        format_axes(ax)

    plt.show()




.. image:: /gallery/lines_bars_and_markers/images/sphx_glr_marker_reference_002.png
    :alt: Filled markers
    :class: sphx-glr-single-img





.. _marker_fill_styles:

Marker fill styles
------------------
The edge color and fill color of filled markers can be specified separately.
Additionally, the ``fillstyle`` can be configured to be unfilled, fully
filled, or half-filled in various directions. The half-filled styles use
``markerfacecoloralt`` as secondary fill color.


.. code-block:: default


    fig, ax = plt.subplots()
    fig.suptitle('Marker fillstyle', fontsize=14)
    fig.subplots_adjust(left=0.4)

    filled_marker_style = dict(marker='o', linestyle=':', markersize=15,
                               color='darkgrey',
                               markerfacecolor='tab:blue',
                               markerfacecoloralt='lightsteelblue',
                               markeredgecolor='brown')

    for y, fill_style in enumerate(Line2D.fillStyles):
        ax.text(-0.5, y, repr(fill_style), **text_style)
        ax.plot([y] * 3, fillstyle=fill_style, **filled_marker_style)
    format_axes(ax)

    plt.show()





.. image:: /gallery/lines_bars_and_markers/images/sphx_glr_marker_reference_003.png
    :alt: Marker fillstyle
    :class: sphx-glr-single-img





Markers created from TeX symbols
================================

Use :doc:`MathText </tutorials/text/mathtext>`, to use custom marker symbols,
like e.g. ``"$\u266B$"``. For an overview over the STIX font symbols refer
to the `STIX font table <http://www.stixfonts.org/allGlyphs.html>`_.
Also see the :doc:`/gallery/text_labels_and_annotations/stix_fonts_demo`.


.. code-block:: default



    fig, ax = plt.subplots()
    fig.suptitle('Mathtext markers', fontsize=14)
    fig.subplots_adjust(left=0.4)

    marker_style.update(markeredgecolor="None", markersize=15)
    markers = ["$1$", r"$\frac{1}{2}$", "$f$", "$\u266B$", r"$\mathcal{A}$"]

    for y, marker in enumerate(markers):
        # Escape dollars so that the text is written "as is", not as mathtext.
        ax.text(-0.5, y, repr(marker).replace("$", r"\$"), **text_style)
        ax.plot([y] * 3, marker=marker, **marker_style)
    format_axes(ax)

    plt.show()



.. image:: /gallery/lines_bars_and_markers/images/sphx_glr_marker_reference_004.png
    :alt: Mathtext markers
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Substituting symbol A from STIXNonUnicode





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.516 seconds)


.. _sphx_glr_download_gallery_lines_bars_and_markers_marker_reference.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: marker_reference.py <marker_reference.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: marker_reference.ipynb <marker_reference.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    Keywords: matplotlib code example, codex, python plot, pyplot
    `Gallery generated by Sphinx-Gallery
    <https://sphinx-gallery.readthedocs.io>`_
